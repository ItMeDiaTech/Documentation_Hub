name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          npm version $VERSION --no-git-tag-version
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run typecheck

      - name: Build application
        run: npm run build

      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run build:electron
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compress Windows installer to ZIP
        if: matrix.os == 'windows-latest'
        run: |
          cd release
          $exeFile = Get-ChildItem -Filter "*.exe" | Select-Object -First 1
          if ($exeFile) {
            $zipName = $exeFile.BaseName + "-Compressed.zip"
            Write-Host "Compressing $($exeFile.Name) to $zipName"
            Compress-Archive -Path $exeFile.Name -DestinationPath $zipName -CompressionLevel Optimal
            Write-Host "Created compressed installer: $zipName"
          } else {
            Write-Host "No .exe file found to compress"
          }
        shell: pwsh

      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run build:electron
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:electron
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            release/*.exe
            release/*.zip
            release/latest.yml

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            release/*.dmg
            release/latest-mac.yml

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: |
            release/*.AppImage
            release/latest-linux.yml

  create-release:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-installer/*.exe
            windows-installer/*.zip
            windows-installer/latest.yml
            macos-installer/*.dmg
            macos-installer/latest-mac.yml
            linux-installer/*.AppImage
            linux-installer/latest-linux.yml
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
