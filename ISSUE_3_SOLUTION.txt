GITHUB ISSUE #3 SOLUTION SUMMARY
=================================

PROBLEM:
- GlobalStatsProvider creates separate IndexedDB connection
- Uses state for db reference (anti-pattern)
- No connection pooling or proper cleanup
- Contrast: SessionContext uses correct pool pattern

SOLUTION:
- Create GlobalStatsConnectionPool class in indexedDB.ts
- Add helper functions: loadGlobalStats, saveGlobalStats, resetGlobalStats
- Refactor GlobalStatsContext to use pool instead of direct openDB()
- Update beforeunload cleanup

FILES TO MODIFY:
1. src/utils/indexedDB.ts (add ~200 lines)
2. src/contexts/GlobalStatsContext.tsx (refactor, reduce lines)

KEY CHANGES:

A. indexedDB.ts additions:

1. Add GlobalStatsConnectionPool class (similar to IndexedDBConnectionPool)
   - Database: DocHub_GlobalStats
   - Store: stats
   - Key: global

2. Create singleton: globalStatsConnectionPool

3. Update beforeunload handler:
   window.addEventListener('beforeunload', () => {
     connectionPool.close();
     globalStatsConnectionPool.close();  // ADD
   });

4. Export helpers:
   - loadGlobalStats()
   - saveGlobalStats()
   - resetGlobalStats()

B. GlobalStatsContext.tsx changes:

1. REMOVE:
   - import { openDB, DBSchema, IDBPDatabase } from 'idb'
   - interface GlobalStatsDB
   - const [db, setDb] = useState(null)

2. ADD:
   - import { loadGlobalStats, saveGlobalStats, resetGlobalStats } from indexedDB

3. REPLACE useEffect initialization:
   FROM: database = await openDB<GlobalStatsDB>(DB_NAME, ...)
   TO:   const existingStats = await loadGlobalStats()

4. UPDATE updateStats callback:
   FROM: db.put(STATS_STORE, updatedStats, STATS_KEY)
   TO:   await saveGlobalStats(updatedStats)
   
   FROM: [db] (dependency)
   TO:   [log] (dependency)

5. UPDATE resetAllStats callback:
   FROM: await db.put(STATS_STORE, freshStats, STATS_KEY)
   TO:   await resetGlobalStatsDB(freshStats)

BACKWARD COMPATIBILITY:
- All consumers use useGlobalStats() hook
- Hook interface remains UNCHANGED
- NO breaking changes
- Refactoring is transparent to consumers

CONSUMERS (no code changes needed):
- Dashboard.tsx (READ)
- Analytics.tsx (WRITE async)
- Settings.tsx (READ)
- SessionContext.tsx (WRITE async)

TESTING:
1. npm run typecheck (should pass)
2. Manual: Create session, process docs, check stats persist
3. Memory: Use Chrome DevTools to verify no growth on remount

BENEFITS:
- Single connection throughout app (not multiple on remounts)
- Proper cleanup guaranteed via beforeunload
- Consistent pattern with SessionContext
- Eliminates db-in-state anti-pattern
- Automatic reconnection on failure

TIME ESTIMATE: 30-45 minutes
COMPLEXITY: Medium (familiar pattern from SessionContext)

RELATED FILES FOR REFERENCE:
- src/utils/indexedDB.ts (lines 36-186: IndexedDBConnectionPool pattern)
- src/contexts/SessionContext.tsx (correct usage pattern)
